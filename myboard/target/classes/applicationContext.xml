<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

	<!-- <bean id="tv" class="peter.spring.polymorphism.SamsungTV" 
	 p:speaker-ref="apple" p:price="230000"> -->
		<!-- <constructor-arg index="0" ref="apple"></constructor-arg>
		<constructor-arg index="1" value="3000000"></constructor-arg> -->
		<!-- <property name="speaker" ref="apple"></property>
		<property name="price" value="3000000"></property> -->
	<!-- </bean> -->
	<!-- <bean id="sony" class="peter.spring.polymorphism.SonySpeaker"></bean> -->
	<!-- <bean id="apple" class="peter.spring.polymorphism.AppleSpeaker"></bean> -->
	<!--
	init-method="start" destroy-method="stop" 이거 추가하면
	이 객체가 생성될때 init-method 가 실행되고 객체가 삭제될때(컨테이너가 클로즈당할때?) destroy-method 실행됨 
	 -->
	 <!-- 
	 scope="prototype" or "singleton"
	 prototype: 객체 생성때마다 새로운 객체 생성
	 singleton: 싱글톤, 하나의 객체만 생성
	  -->
	  
	  <!-- 
	  <bean id="collectionBean" class="peter.spring.collection.CollectionBean">
	  	<property name="addressList">
	  		<list>
	  			<value>서울시 서초구 서초동</value>
	  			<value>서울시 동대문구 장안동</value>
	  		</list>
	  	</property>
	  	<property name="addressList2">
	  		<map>
	  			<entry>
	  				<key><value>홍길동</value></key>
	  				<value>율도국</value>
	  			</entry>
	  			<entry>
	  				<key><value>손오공</value></key>
	  				<value>화가산</value>
	  			</entry>
	  		</map>
	  	</property>
	  	<property name="addressList3">
	  		<props>
	  			<prop key="홍길동">율도국</prop>
	  			<prop key="손오공">화가산</prop>
	  		</props>
	  	</property>
	  	<property name="addressList4">
	  		<set value-type="java.lang.String">
	  			<value>서울시 서초구 서초동</value>
	  			<value>서울시 서초구 서초동</value>
	  			<value>서울시 서초구 서초동</value>
	  			<value>서울시 동대문구 장안동</value>
	  		</set>
	  	</property>
	  </bean>
	   -->
	  
	  <!-- <context:component-scan base-package="peter.spring.polymorphism"></context:component-scan>
	  <bean id="sony" class="peter.spring.polymorphism.SonySpeaker"></bean> -->
	  
	  <!-- 
	  <bean id="myLifeBean" class="peter.spring.lifecycle.MyLifeBeanImpl" init-method="init">
	  	<property name="greeting"><value>Hello, </value></property>
	  </bean>
	  <bean class="peter.spring.lifecycle.CustomBeanPostProcessor"></bean>
	   -->
	   
	   <!-- <context:component-scan base-package="peter.spring.web"></context:component-scan>
	   <aop:aspectj-autoproxy></aop:aspectj-autoproxy> -->
	   <!-- 
	   <bean id="userService" class="peter.spring.web.user.impl.UserServiceImpl">
	   		<property name="userDAO" ref="userDAO"></property>
	   </bean>
	   <bean id="userDAO" class="peter.spring.web.user.impl.UserDAO"></bean>
	   -->
	   
	   <!-- <bean id="log" class="peter.spring.web.common.Log4jAdvice"></bean> -->
	   <!-- <bean id="before" class="peter.spring.web.common.BeforeAdvice"></bean>
	   <bean id="afterReturning" class="peter.spring.web.common.AfterReturningAdvice"></bean>
	   <bean id="afterThrowing" class="peter.spring.web.common.AfterThrowingAdvice"></bean>
	   <bean id="afterAdvice" class="peter.spring.web.common.AfterAdvice"></bean>
	   <bean id="around" class="peter.spring.web.common.AroundAdvice"></bean>
	   <aop:config>
	   	<aop:pointcut expression="execution(* peter.spring.web..*Impl.*(..))" id="allPointcut"/>
	   	<aop:pointcut expression="execution(* peter.spring.web..*Impl.get*(..))" id="getPointcut"/>
	   	<aop:aspect ref="around">
	   		<aop:around method="aroundLog" pointcut-ref="allPointcut"/>
	   	</aop:aspect>
	   </aop:config> -->
	   <!-- DataSource 등록
	   <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
		destroy-method="close">
			<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
			<property name="url" value="jdbc:oracle:thin:@localhost:1521/xe"/>
			<property name="username" value="mytest"/>
			<property name="password" value="mytest"/>
		</bean>
		 -->
	   <!-- <context:property-placeholder location="classpath:config/database.properties"/>
		<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
		destroy-method="close">
			<property name="driverClassName" value="${jdbc.driver}"/>
			<property name="url" value="${jdbc.url}"/>
			<property name="username" value="${jdbc.username}"/>
			<property name="password" value="${jdbc.password}"/>
		</bean> -->
		<!-- 스프링 JDBC 설정 -->
	   <!-- <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
			<property name="dataSource" ref="dataSource" />
		</bean> -->
		<!-- 트랜잭션 처리
		<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
			<property name="dataSource" ref="dataSource"></property>
		</bean>
		
		<tx:advice id="txAdvice" transaction-manager="txManager">
			<tx:attributes>
				<tx:method name="get*" read-only="true"/>
				<tx:method name="*"/>
			</tx:attributes>
		</tx:advice>
		
		<aop:config>
			<aop:pointcut expression="execution (* peter.spring.web..* (..))" id="txPointcut"/>
			<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
		</aop:config>
		 -->
</beans>
